[{"C:\\code\\DACK\\caro-admin\\src\\index.js":"1","C:\\code\\DACK\\caro-admin\\src\\App.js":"2","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\login.js":"3","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\register.js":"4","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Chart.js":"5","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\listItems.js":"6","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Deposits.js":"7","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Orders.js":"8","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\Service\\authService.js":"9","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Title.js":"10","C:\\code\\DACK\\caro-admin\\src\\Util\\callAPI.js":"11","C:\\code\\DACK\\caro-admin\\src\\Components\\ListUser\\index.js":"12","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Control.js":"13","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\index.js":"14","C:\\code\\DACK\\caro-admin\\src\\Components\\Report\\index.js":"15","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\index.js":"16","C:\\code\\DACK\\caro-admin\\src\\Util\\userAPI.js":"17","C:\\code\\DACK\\caro-admin\\src\\Components\\Profile\\index.js":"18","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\board.js":"19","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\player.js":"20","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\gameCheck.js":"21","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\square.js":"22","C:\\code\\DACK\\caro-admin\\src\\Components\\IconSVG\\War.js":"23","C:\\code\\DACK\\caro-admin\\src\\Util\\gameAPI.js":"24","C:\\code\\DACK\\caro-admin\\src\\Context\\ListRoomContext.js":"25"},{"size":469,"mtime":1607502116310,"results":"26","hashOfConfig":"27"},{"size":2655,"mtime":1609733645792,"results":"28","hashOfConfig":"27"},{"size":5326,"mtime":1609730081159,"results":"29","hashOfConfig":"27"},{"size":11532,"mtime":1607502116307,"results":"30","hashOfConfig":"27"},{"size":1767,"mtime":1607502116307,"results":"31","hashOfConfig":"27"},{"size":2484,"mtime":1609139446312,"results":"32","hashOfConfig":"27"},{"size":988,"mtime":1607502116308,"results":"33","hashOfConfig":"27"},{"size":2735,"mtime":1608708557335,"results":"34","hashOfConfig":"27"},{"size":957,"mtime":1607502116307,"results":"35","hashOfConfig":"27"},{"size":376,"mtime":1607502116309,"results":"36","hashOfConfig":"27"},{"size":413,"mtime":1607502116309,"results":"37","hashOfConfig":"27"},{"size":13581,"mtime":1609430641436,"results":"38","hashOfConfig":"27"},{"size":1779,"mtime":1609347181077,"results":"39","hashOfConfig":"27"},{"size":8576,"mtime":1609730116966,"results":"40","hashOfConfig":"27"},{"size":8467,"mtime":1609733617500,"results":"41","hashOfConfig":"27"},{"size":5143,"mtime":1609738265351,"results":"42","hashOfConfig":"27"},{"size":599,"mtime":1609391884147,"results":"43","hashOfConfig":"27"},{"size":4370,"mtime":1609404375603,"results":"44","hashOfConfig":"27"},{"size":906,"mtime":1609118489363,"results":"45","hashOfConfig":"27"},{"size":1728,"mtime":1609434150174,"results":"46","hashOfConfig":"27"},{"size":1350,"mtime":1609416962542,"results":"47","hashOfConfig":"27"},{"size":294,"mtime":1609118489365,"results":"48","hashOfConfig":"27"},{"size":3609,"mtime":1609433507746,"results":"49","hashOfConfig":"27"},{"size":274,"mtime":1609690884485,"results":"50","hashOfConfig":"27"},{"size":79,"mtime":1609730716052,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"uyqfe1",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\code\\DACK\\caro-admin\\src\\index.js",[],["107","108"],"C:\\code\\DACK\\caro-admin\\src\\App.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\login.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\register.js",["109"],"import React, {useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Redirect, Link} from \"react-router-dom\";\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {signUpService} from \"./Service/authService\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(1, 0, 2),\r\n        color: \"#fff\"\r\n    },\r\n    input: {\r\n        fontSize: \"15px\"\r\n    },\r\n    labelInput:{\r\n        fontSize: \"15px\"\r\n    }\r\n}));\r\n\r\n\r\nexport default function Register() {\r\n    const [information, setInformation] = useState({\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            rePassword: \"\",\r\n        }\r\n    )\r\n    const [status, setStatus] = useState({type: \"error\", content: \"\"});\r\n    const [alert, setAlert] = useState(false);\r\n    const [isSignUpSuccess, setIsSignUpSuccess] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if(information.email.length === 0 || information.lastName.length === 0 || information.firstName.length === 0 ||\r\n            information.password.length === 0 || information.rePassword.length === 0)\r\n        {\r\n            setStatus({type: \"error\", content: \"Please fill all fields\"})\r\n            setAlert(true);\r\n        }else if(information.password !== information.rePassword)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password not match\"})\r\n            setAlert(true);\r\n        }\r\n        else if(information.password.length < 6)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password at least 6 characters\"})\r\n            setAlert(true);\r\n        }\r\n        else {\r\n            const res = await signUpService(information.username, information.firstName,information.lastName,\r\n                information.password, information.email)\r\n            if(res.data.err)\r\n            {\r\n                setStatus({type: \"error\", content: res.data.err});\r\n                setAlert(true);\r\n            }else if (res.data.msg)\r\n            {\r\n                setStatus({type: \"success\", content: res.data.msg});\r\n                setAlert(true);\r\n                //direct\r\n                //setIsSignUpSuccess(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    if(isSignUpSuccess) return (<Redirect to=\"/login\"/>)\r\n\r\n    return (\r\n        <div>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Register\r\n                    </Typography>\r\n                    <Collapse in={alert}>\r\n                        <Alert severity={status.type}\r\n                               action={\r\n                                   <IconButton\r\n                                       aria-label=\"close\"\r\n                                       color=\"inherit\"\r\n                                       size=\"small\"\r\n                                       onClick={() => {\r\n                                           setAlert(false);\r\n                                       }}\r\n                                   >\r\n                                       <CloseIcon fontSize=\"inherit\" />\r\n                                   </IconButton>\r\n                               }\r\n                        >\r\n                            {status.content}\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    autoComplete=\"fname\"\r\n                                    name=\"firstName\"\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, firstName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoComplete=\"lname\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, lastName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, username: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, email: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, password: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"re-password\"\r\n                                    label=\"Re-Password\"\r\n                                    type=\"password\"\r\n                                    id=\"re-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, rePassword: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container justify=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link to='/login' variant=\"body2\">\r\n                                    Already have an account? Login\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}",["110","111"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Chart.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\listItems.js",[],["112","113"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Deposits.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Orders.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\Service\\authService.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Title.js",[],"C:\\code\\DACK\\caro-admin\\src\\Util\\callAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\ListUser\\index.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Control.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\index.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Report\\index.js",["114","115"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\index.js",["116","117"],"C:\\code\\DACK\\caro-admin\\src\\Util\\userAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Profile\\index.js",["118","119"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Container, Grid } from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport userAPI from '../../Util/userAPI'\r\n\r\nexport default function Profile(props) {\r\n  const userNow = props.loginState.user;\r\n  const [error, setError] = useState();\r\n\r\n  const [input, setInput] = useState({\r\n    id: userNow._id,\r\n    firstName: userNow.firstName,\r\n    lastName: userNow.lastName,\r\n    username: userNow.username,\r\n    email: userNow.email,\r\n    pass: \"\",\r\n  });\r\n\r\n  const handleEditProfile = async (e) => {\r\n    e.preventDefault();\r\n    const res = await userAPI.editProfile(input);\r\n    if (res.data.error) {\r\n      setError(res.data.error)\r\n    }\r\n    else {\r\n      setError('')\r\n      props.setReset(!props.reset);\r\n    }\r\n  }\r\n\r\n  const handleChangePass = async (e) => {\r\n    e.preventDefault();\r\n    // const res = await userAPI.editProfile(input);\r\n    // if (res.error) {\r\n    //   console.log(res.error)\r\n    //   setError(res.error)\r\n    // }\r\n    // else {\r\n    //   console.log(res)\r\n    //   props.setReset(!props.reset);\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item md={6} xs={12}>\r\n        <h1>Edit profile</h1>\r\n        <form onSubmit={handleEditProfile}>\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Fisrt name\"\r\n            value={input.firstName}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, firstName: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Last name\"\r\n            value={input.lastName}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, lastName: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Username\"\r\n            value={input.username}\r\n            variant=\"outlined\"\r\n            disabled\r\n            onChange={(e) =>\r\n              setInput({ ...input, username: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Email\"\r\n            value={input.email}\r\n            variant=\"outlined\"\r\n            disabled\r\n            onChange={(e) =>\r\n              setInput({ ...input, email: e.target.value })}\r\n          />\r\n          {error ? <h4 style={{ color: 'red', margin: '5px 0' }}>{error}</h4> : null}\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Current password\"\r\n            type=\"password\"\r\n            value={input.pass}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" style={{ margin: '20px 0' }}>\r\n            Edit profile\r\n          </Button>\r\n        </form>\r\n      </Grid>\r\n      <Grid item md={6} xs={12}>\r\n        <h1>Change password</h1>\r\n        <form onSubmit={handleChangePass}>\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Current password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Retype password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" style={{ margin: '20px 0' }}>\r\n            Change password\r\n          </Button>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\board.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\player.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\gameCheck.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\square.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\IconSVG\\War.js",[],"C:\\code\\DACK\\caro-admin\\src\\Util\\gameAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Context\\ListRoomContext.js",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":58,"column":29,"nodeType":"126","messageId":"127","endLine":58,"endColumn":47},{"ruleId":"120","replacedBy":"128"},{"ruleId":"122","replacedBy":"129"},{"ruleId":"120","replacedBy":"130"},{"ruleId":"122","replacedBy":"131"},{"ruleId":"124","severity":1,"message":"132","line":1,"column":38,"nodeType":"126","messageId":"127","endLine":1,"endColumn":48},{"ruleId":"124","severity":1,"message":"133","line":160,"column":17,"nodeType":"126","messageId":"127","endLine":160,"endColumn":25},{"ruleId":"134","severity":1,"message":"135","line":33,"column":6,"nodeType":"136","endLine":33,"endColumn":8,"suggestions":"137"},{"ruleId":"124","severity":1,"message":"138","line":91,"column":11,"nodeType":"126","messageId":"127","endLine":91,"endColumn":19},{"ruleId":"124","severity":1,"message":"139","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"140","line":2,"column":18,"nodeType":"126","messageId":"127","endLine":2,"endColumn":27},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'setIsSignUpSuccess' is assigned a value but never used.","Identifier","unusedVar",["141"],["142"],["141"],["142"],"'useContext' is defined but never used.","'setReset' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["143"],"'location' is assigned a value but never used.","'useEffect' is defined but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},"Update the dependencies array to be: [props.match.params.id]",{"range":"146","text":"147"},[1039,1041],"[props.match.params.id]"]