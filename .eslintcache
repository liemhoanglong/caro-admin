[{"C:\\code\\DACK\\caro-admin\\src\\index.js":"1","C:\\code\\DACK\\caro-admin\\src\\App.js":"2","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\login.js":"3","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\register.js":"4","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Chart.js":"5","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\listItems.js":"6","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Deposits.js":"7","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Orders.js":"8","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\Service\\authService.js":"9","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Title.js":"10","C:\\code\\DACK\\caro-admin\\src\\Util\\callAPI.js":"11","C:\\code\\DACK\\caro-admin\\src\\Components\\ListUser\\index.js":"12","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Control.js":"13","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\index.js":"14","C:\\code\\DACK\\caro-admin\\src\\Components\\Report\\index.js":"15","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\index.js":"16","C:\\code\\DACK\\caro-admin\\src\\Util\\userAPI.js":"17","C:\\code\\DACK\\caro-admin\\src\\Components\\Profile\\index.js":"18","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\board.js":"19","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\player.js":"20","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\gameCheck.js":"21","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\square.js":"22","C:\\code\\DACK\\caro-admin\\src\\Components\\IconSVG\\War.js":"23","C:\\code\\DACK\\caro-admin\\src\\Util\\gameAPI.js":"24","C:\\code\\DACK\\caro-admin\\src\\Context\\ListRoomContext.js":"25"},{"size":469,"mtime":1607502116310,"results":"26","hashOfConfig":"27"},{"size":2655,"mtime":1609733645792,"results":"28","hashOfConfig":"27"},{"size":5326,"mtime":1609730081159,"results":"29","hashOfConfig":"27"},{"size":11532,"mtime":1607502116307,"results":"30","hashOfConfig":"27"},{"size":2861,"mtime":1610425426113,"results":"31","hashOfConfig":"27"},{"size":2484,"mtime":1609139446312,"results":"32","hashOfConfig":"27"},{"size":988,"mtime":1607502116308,"results":"33","hashOfConfig":"27"},{"size":2735,"mtime":1608708557335,"results":"34","hashOfConfig":"27"},{"size":957,"mtime":1607502116307,"results":"35","hashOfConfig":"27"},{"size":376,"mtime":1607502116309,"results":"36","hashOfConfig":"27"},{"size":413,"mtime":1607502116309,"results":"37","hashOfConfig":"27"},{"size":13601,"mtime":1610508406718,"results":"38","hashOfConfig":"27"},{"size":1779,"mtime":1609347181077,"results":"39","hashOfConfig":"27"},{"size":8570,"mtime":1610418475819,"results":"40","hashOfConfig":"27"},{"size":8798,"mtime":1610510189250,"results":"41","hashOfConfig":"27"},{"size":6159,"mtime":1610509998725,"results":"42","hashOfConfig":"27"},{"size":599,"mtime":1609391884147,"results":"43","hashOfConfig":"27"},{"size":4418,"mtime":1610425227188,"results":"44","hashOfConfig":"27"},{"size":906,"mtime":1609118489363,"results":"45","hashOfConfig":"27"},{"size":1728,"mtime":1609434150174,"results":"46","hashOfConfig":"27"},{"size":1350,"mtime":1609416962542,"results":"47","hashOfConfig":"27"},{"size":294,"mtime":1609118489365,"results":"48","hashOfConfig":"27"},{"size":3609,"mtime":1609433507746,"results":"49","hashOfConfig":"27"},{"size":274,"mtime":1609690884485,"results":"50","hashOfConfig":"27"},{"size":79,"mtime":1609730716052,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"uyqfe1",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\code\\DACK\\caro-admin\\src\\index.js",[],["109","110"],"C:\\code\\DACK\\caro-admin\\src\\App.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\login.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\register.js",["111"],"import React, {useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Redirect, Link} from \"react-router-dom\";\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {signUpService} from \"./Service/authService\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(1, 0, 2),\r\n        color: \"#fff\"\r\n    },\r\n    input: {\r\n        fontSize: \"15px\"\r\n    },\r\n    labelInput:{\r\n        fontSize: \"15px\"\r\n    }\r\n}));\r\n\r\n\r\nexport default function Register() {\r\n    const [information, setInformation] = useState({\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            rePassword: \"\",\r\n        }\r\n    )\r\n    const [status, setStatus] = useState({type: \"error\", content: \"\"});\r\n    const [alert, setAlert] = useState(false);\r\n    const [isSignUpSuccess, setIsSignUpSuccess] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if(information.email.length === 0 || information.lastName.length === 0 || information.firstName.length === 0 ||\r\n            information.password.length === 0 || information.rePassword.length === 0)\r\n        {\r\n            setStatus({type: \"error\", content: \"Please fill all fields\"})\r\n            setAlert(true);\r\n        }else if(information.password !== information.rePassword)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password not match\"})\r\n            setAlert(true);\r\n        }\r\n        else if(information.password.length < 6)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password at least 6 characters\"})\r\n            setAlert(true);\r\n        }\r\n        else {\r\n            const res = await signUpService(information.username, information.firstName,information.lastName,\r\n                information.password, information.email)\r\n            if(res.data.err)\r\n            {\r\n                setStatus({type: \"error\", content: res.data.err});\r\n                setAlert(true);\r\n            }else if (res.data.msg)\r\n            {\r\n                setStatus({type: \"success\", content: res.data.msg});\r\n                setAlert(true);\r\n                //direct\r\n                //setIsSignUpSuccess(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    if(isSignUpSuccess) return (<Redirect to=\"/login\"/>)\r\n\r\n    return (\r\n        <div>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Register\r\n                    </Typography>\r\n                    <Collapse in={alert}>\r\n                        <Alert severity={status.type}\r\n                               action={\r\n                                   <IconButton\r\n                                       aria-label=\"close\"\r\n                                       color=\"inherit\"\r\n                                       size=\"small\"\r\n                                       onClick={() => {\r\n                                           setAlert(false);\r\n                                       }}\r\n                                   >\r\n                                       <CloseIcon fontSize=\"inherit\" />\r\n                                   </IconButton>\r\n                               }\r\n                        >\r\n                            {status.content}\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    autoComplete=\"fname\"\r\n                                    name=\"firstName\"\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, firstName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoComplete=\"lname\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, lastName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, username: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, email: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, password: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"re-password\"\r\n                                    label=\"Re-Password\"\r\n                                    type=\"password\"\r\n                                    id=\"re-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, rePassword: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container justify=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link to='/login' variant=\"body2\">\r\n                                    Already have an account? Login\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}",["112","113"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Chart.js",["114"],"import React, { useState, useEffect } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\r\n\r\nimport Title from './Title';\r\nimport gameAPI from '../../Util/gameAPI';\r\n\r\n// Generate Sales Data\r\nfunction createData(time, amount) {\r\n    return { time, amount };\r\n}\r\n\r\nconst data = [\r\n    createData('00:00', 0),\r\n    createData('03:00', 300),\r\n    createData('06:00', 600),\r\n    createData('09:00', 800),\r\n    createData('12:00', 1500),\r\n    createData('15:00', 2000),\r\n    createData('18:00', 2400),\r\n    createData('21:00', 2400),\r\n    createData('24:00', 0),\r\n];\r\n\r\nexport default function Chart() {\r\n    const theme = useTheme();\r\n    const [rows, setRows] = useState([]);\r\n    console.log(rows)\r\n    // console.log(data)\r\n    useEffect(() => {\r\n        const fetchAll = async () => {\r\n            try {\r\n                const res = await gameAPI.getAll();\r\n                setRows(countFreq(res.data));\r\n            } catch (error) {\r\n                console.log('Failed to fetch: ', error);\r\n            }\r\n        }\r\n        fetchAll();\r\n    }, [])\r\n\r\n    function countFreq(arr) {\r\n        let a = [], b = [], prev;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (!arr[i].gamePlay.includes(prev)) {\r\n                a.push(arr[i].gamePlay.slice(0, 10));\r\n                b.push(1);\r\n            } else {\r\n                b[b.length - 1]++;\r\n            }\r\n            prev = arr[i].gamePlay.slice(0, 10);\r\n        }\r\n        console.log([a, b])\r\n        let result=[];\r\n        for(let i = 0; i < a.length; i++){\r\n            result.push(createData(a[i], b[i]))\r\n        }\r\n        console.log(result)\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title>Total room per day</Title>\r\n            <ResponsiveContainer>\r\n                <LineChart\r\n                    data={rows}\r\n                    margin={{\r\n                        top: 16,\r\n                        right: 16,\r\n                        bottom: 0,\r\n                        left: 24,\r\n                    }}\r\n                >\r\n                    <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\r\n                    <YAxis stroke={theme.palette.text.secondary}>\r\n                        <Label\r\n                            angle={270}\r\n                            position=\"left\"\r\n                            style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\r\n                        >\r\n                            Room\r\n                        </Label>\r\n                    </YAxis>\r\n                    <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\listItems.js",[],["115","116"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Deposits.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Orders.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\Service\\authService.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Title.js",[],"C:\\code\\DACK\\caro-admin\\src\\Util\\callAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\ListUser\\index.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Control.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\index.js",["117","118"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\n// import NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport './dashboard.css';\r\n// import { mainListItems, secondaryListItems } from './listItems';\r\nimport Chart from './Chart';\r\nimport Deposits from './Deposits';\r\nimport Orders from './Orders';\r\nimport ListUser from '../ListUser';\r\nimport Control from './Control';\r\nimport Report from '../Report';\r\nimport Profile from '../Profile';\r\nimport Game from '../Game';\r\nimport { logoutService } from \"../Admin/Service/authService\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n        Hùng & Long\r\n      {' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard(props) {\r\n  // console.log(props)\r\n  // const [loginState, setLoginState] = useState({isLogin: false, user: null});\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     const res = await userAPI.Profile();\r\n  //     res.data.err ?\r\n  //       props.setLoginState({ isLogin: false, user: null })\r\n  //       :\r\n  //       props.setLoginState({ isLogin: true, user: res.data.user })\r\n  //   }\r\n  //   fetchData();\r\n  // }, [props.loginState.isLogin])\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const handleLogout = () => {\r\n    logoutService();\r\n    props.setLoginState(false, null);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            {props.type === 1 ? 'Dashboard' : props.type === 2 ? 'List user' : props.type === 3 ? 'Profile' :  props.type === 4 ? 'Report' :  props.type === 5 ? 'Game' : null}\r\n          </Typography>\r\n          {props.loginState.isLogin &&\r\n            <>\r\n              <Link to='/profile' className='btn-nav'><Typography>{'Hello ' + props.loginState.user.firstName + ' ' + props.loginState.user.lastName}</Typography></Link>\r\n              <Link onClick={() => handleLogout()} to='/' className='btn-nav' style={{ marginLeft: 50 }}><Typography>Log out</Typography></Link>\r\n            </>\r\n          }\r\n          {/* <IconButton color=\"inherit\">\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <Control type={props.type} />\r\n          {/* {mainListItems} */}\r\n        </List>\r\n        <Divider />\r\n        {/* <List>{secondaryListItems}</List> */}\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {props.type === 1 ?\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Paper className={fixedHeightPaper}>\r\n                    <Chart />\r\n                  </Paper>\r\n                </Grid>\r\n                {/* <Grid item xs={12} md={4} lg={3}>\r\n                  <Paper className={fixedHeightPaper}>\r\n                    <Deposits />\r\n                  </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Paper className={classes.paper}>\r\n                    <Orders />\r\n                  </Paper>\r\n                </Grid> */}\r\n              </>\r\n              : props.type === 2 ?\r\n                <Grid item xs={12}>\r\n                  <Paper className={classes.paper}>\r\n                    <ListUser />\r\n                  </Paper>\r\n                </Grid>\r\n                : props.type === 3 ?\r\n                  <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                      <Profile loginState={props.loginState} setLoginState={props.setLoginState} reset={props.reset} setReset={props.setReset}/>\r\n                    </Paper>\r\n                  </Grid>\r\n                  : props.type === 4 ?\r\n                    <Grid item xs={12}>\r\n                      <Paper className={classes.paper}>\r\n                        <Report />\r\n                      </Paper>\r\n                    </Grid>\r\n                    :  props.type === 5 ?\r\n                    <Grid item xs={12}>\r\n                      <Paper className={classes.paper}>\r\n                        <Game match={props.match} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    : null\r\n            }\r\n          </Grid>\r\n          <Box pt={4}>\r\n            <Copyright />\r\n          </Box>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","C:\\code\\DACK\\caro-admin\\src\\Components\\Report\\index.js",["119","120"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\index.js",["121","122","123"],"C:\\code\\DACK\\caro-admin\\src\\Util\\userAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Profile\\index.js",["124","125","126"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Container, Grid } from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport userAPI from '../../Util/userAPI'\r\n\r\nexport default function Profile(props) {\r\n  const userNow = props.loginState.user;\r\n  const [error, setError] = useState();\r\n\r\n  const [input, setInput] = useState({\r\n    id: userNow._id,\r\n    firstName: userNow.firstName,\r\n    lastName: userNow.lastName,\r\n    username: userNow.username,\r\n    email: userNow.email,\r\n    pass: \"\",\r\n  });\r\n\r\n  const handleEditProfile = async (e) => {\r\n    e.preventDefault();\r\n    const res = await userAPI.editProfile(input);\r\n    if (res.data.error) {\r\n      setError(res.data.error)\r\n    }\r\n    else {\r\n      setError('')\r\n      props.setReset(!props.reset);\r\n    }\r\n  }\r\n\r\n  const handleChangePass = async (e) => {\r\n    e.preventDefault();\r\n    // const res = await userAPI.editProfile(input);\r\n    // if (res.error) {\r\n    //   console.log(res.error)\r\n    //   setError(res.error)\r\n    // }\r\n    // else {\r\n    //   console.log(res)\r\n    //   props.setReset(!props.reset);\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item md={3} xs={0}></Grid>\r\n      <Grid item md={6} xs={12}>\r\n        <h1>Edit profile</h1>\r\n        <form onSubmit={handleEditProfile}>\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Fisrt name\"\r\n            value={input.firstName}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, firstName: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Last name\"\r\n            value={input.lastName}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, lastName: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Username\"\r\n            value={input.username}\r\n            variant=\"outlined\"\r\n            disabled\r\n            onChange={(e) =>\r\n              setInput({ ...input, username: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Email\"\r\n            value={input.email}\r\n            variant=\"outlined\"\r\n            disabled\r\n            onChange={(e) =>\r\n              setInput({ ...input, email: e.target.value })}\r\n          />\r\n          {error ? <h4 style={{ color: 'red', margin: '5px 0' }}>{error}</h4> : null}\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Current password\"\r\n            type=\"password\"\r\n            value={input.pass}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" style={{ margin: '20px 0' }}>\r\n            Edit profile\r\n          </Button>\r\n        </form>\r\n      </Grid>\r\n      {/* <Grid item md={6} xs={12}>\r\n        <h1>Change password</h1>\r\n        <form onSubmit={handleChangePass}>\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Current password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Retype password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" style={{ margin: '20px 0' }}>\r\n            Change password\r\n          </Button>\r\n        </form>\r\n      </Grid> */}\r\n    </Grid>\r\n  )\r\n}\r\n","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\board.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\player.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\gameCheck.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\square.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\IconSVG\\War.js",[],"C:\\code\\DACK\\caro-admin\\src\\Util\\gameAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Context\\ListRoomContext.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":58,"column":29,"nodeType":"133","messageId":"134","endLine":58,"endColumn":47},{"ruleId":"127","replacedBy":"135"},{"ruleId":"129","replacedBy":"136"},{"ruleId":"131","severity":1,"message":"137","line":13,"column":7,"nodeType":"133","messageId":"134","endLine":13,"endColumn":11},{"ruleId":"127","replacedBy":"138"},{"ruleId":"129","replacedBy":"139"},{"ruleId":"131","severity":1,"message":"140","line":24,"column":8,"nodeType":"133","messageId":"134","endLine":24,"endColumn":16},{"ruleId":"131","severity":1,"message":"141","line":25,"column":8,"nodeType":"133","messageId":"134","endLine":25,"endColumn":14},{"ruleId":"131","severity":1,"message":"142","line":1,"column":38,"nodeType":"133","messageId":"134","endLine":1,"endColumn":48},{"ruleId":"131","severity":1,"message":"143","line":161,"column":17,"nodeType":"133","messageId":"134","endLine":161,"endColumn":25},{"ruleId":"131","severity":1,"message":"144","line":3,"column":8,"nodeType":"133","messageId":"134","endLine":3,"endColumn":12},{"ruleId":"131","severity":1,"message":"145","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":19},{"ruleId":"146","severity":1,"message":"147","line":40,"column":6,"nodeType":"148","endLine":40,"endColumn":8,"suggestions":"149"},{"ruleId":"131","severity":1,"message":"150","line":1,"column":27,"nodeType":"133","messageId":"134","endLine":1,"endColumn":36},{"ruleId":"131","severity":1,"message":"151","line":2,"column":18,"nodeType":"133","messageId":"134","endLine":2,"endColumn":27},{"ruleId":"131","severity":1,"message":"152","line":32,"column":9,"nodeType":"133","messageId":"134","endLine":32,"endColumn":25},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'setIsSignUpSuccess' is assigned a value but never used.","Identifier","unusedVar",["153"],["154"],"'data' is assigned a value but never used.",["153"],["154"],"'Deposits' is defined but never used.","'Orders' is defined but never used.","'useContext' is defined but never used.","'setReset' is assigned a value but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["155"],"'useEffect' is defined but never used.","'Container' is defined but never used.","'handleChangePass' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},"Update the dependencies array to be: [props.match.params.id]",{"range":"158","text":"159"},[1325,1327],"[props.match.params.id]"]