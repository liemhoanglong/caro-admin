[{"C:\\code\\DACK\\caro-admin\\src\\index.js":"1","C:\\code\\DACK\\caro-admin\\src\\App.js":"2","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\login.js":"3","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\register.js":"4","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Chart.js":"5","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\listItems.js":"6","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Deposits.js":"7","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Orders.js":"8","C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\Service\\authService.js":"9","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Title.js":"10","C:\\code\\DACK\\caro-admin\\src\\Util\\callAPI.js":"11","C:\\code\\DACK\\caro-admin\\src\\Components\\ListUser\\index.js":"12","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Control.js":"13","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\index.js":"14","C:\\code\\DACK\\caro-admin\\src\\Components\\Report\\index.js":"15","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\index.js":"16","C:\\code\\DACK\\caro-admin\\src\\Util\\userAPI.js":"17","C:\\code\\DACK\\caro-admin\\src\\Components\\Profile\\index.js":"18","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\board.js":"19","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\player.js":"20","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\gameCheck.js":"21","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\square.js":"22","C:\\code\\DACK\\caro-admin\\src\\Components\\IconSVG\\War.js":"23","C:\\code\\DACK\\caro-admin\\src\\Util\\gameAPI.js":"24","C:\\code\\DACK\\caro-admin\\src\\Context\\ListRoomContext.js":"25"},{"size":469,"mtime":1607502116310,"results":"26","hashOfConfig":"27"},{"size":2655,"mtime":1609733645792,"results":"28","hashOfConfig":"27"},{"size":5326,"mtime":1609730081159,"results":"29","hashOfConfig":"27"},{"size":11532,"mtime":1607502116307,"results":"30","hashOfConfig":"27"},{"size":2861,"mtime":1610425426113,"results":"31","hashOfConfig":"27"},{"size":2484,"mtime":1609139446312,"results":"32","hashOfConfig":"27"},{"size":988,"mtime":1607502116308,"results":"33","hashOfConfig":"27"},{"size":2735,"mtime":1608708557335,"results":"34","hashOfConfig":"27"},{"size":957,"mtime":1607502116307,"results":"35","hashOfConfig":"27"},{"size":376,"mtime":1607502116309,"results":"36","hashOfConfig":"27"},{"size":482,"mtime":1610541743915,"results":"37","hashOfConfig":"27"},{"size":13601,"mtime":1610508406718,"results":"38","hashOfConfig":"27"},{"size":1779,"mtime":1609347181077,"results":"39","hashOfConfig":"27"},{"size":8570,"mtime":1610542110803,"results":"40","hashOfConfig":"27"},{"size":8802,"mtime":1610541440019,"results":"41","hashOfConfig":"27"},{"size":6159,"mtime":1610509998725,"results":"42","hashOfConfig":"27"},{"size":599,"mtime":1609391884147,"results":"43","hashOfConfig":"27"},{"size":4418,"mtime":1610425227188,"results":"44","hashOfConfig":"27"},{"size":906,"mtime":1609118489363,"results":"45","hashOfConfig":"27"},{"size":1728,"mtime":1609434150174,"results":"46","hashOfConfig":"27"},{"size":1350,"mtime":1609416962542,"results":"47","hashOfConfig":"27"},{"size":294,"mtime":1609118489365,"results":"48","hashOfConfig":"27"},{"size":3609,"mtime":1609433507746,"results":"49","hashOfConfig":"27"},{"size":274,"mtime":1609690884485,"results":"50","hashOfConfig":"27"},{"size":79,"mtime":1609730716052,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"uyqfe1",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\code\\DACK\\caro-admin\\src\\index.js",[],["110","111"],"C:\\code\\DACK\\caro-admin\\src\\App.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\login.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\register.js",["112"],"import React, {useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Redirect, Link} from \"react-router-dom\";\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {signUpService} from \"./Service/authService\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(1, 0, 2),\r\n        color: \"#fff\"\r\n    },\r\n    input: {\r\n        fontSize: \"15px\"\r\n    },\r\n    labelInput:{\r\n        fontSize: \"15px\"\r\n    }\r\n}));\r\n\r\n\r\nexport default function Register() {\r\n    const [information, setInformation] = useState({\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            rePassword: \"\",\r\n        }\r\n    )\r\n    const [status, setStatus] = useState({type: \"error\", content: \"\"});\r\n    const [alert, setAlert] = useState(false);\r\n    const [isSignUpSuccess, setIsSignUpSuccess] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if(information.email.length === 0 || information.lastName.length === 0 || information.firstName.length === 0 ||\r\n            information.password.length === 0 || information.rePassword.length === 0)\r\n        {\r\n            setStatus({type: \"error\", content: \"Please fill all fields\"})\r\n            setAlert(true);\r\n        }else if(information.password !== information.rePassword)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password not match\"})\r\n            setAlert(true);\r\n        }\r\n        else if(information.password.length < 6)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password at least 6 characters\"})\r\n            setAlert(true);\r\n        }\r\n        else {\r\n            const res = await signUpService(information.username, information.firstName,information.lastName,\r\n                information.password, information.email)\r\n            if(res.data.err)\r\n            {\r\n                setStatus({type: \"error\", content: res.data.err});\r\n                setAlert(true);\r\n            }else if (res.data.msg)\r\n            {\r\n                setStatus({type: \"success\", content: res.data.msg});\r\n                setAlert(true);\r\n                //direct\r\n                //setIsSignUpSuccess(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    if(isSignUpSuccess) return (<Redirect to=\"/login\"/>)\r\n\r\n    return (\r\n        <div>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Register\r\n                    </Typography>\r\n                    <Collapse in={alert}>\r\n                        <Alert severity={status.type}\r\n                               action={\r\n                                   <IconButton\r\n                                       aria-label=\"close\"\r\n                                       color=\"inherit\"\r\n                                       size=\"small\"\r\n                                       onClick={() => {\r\n                                           setAlert(false);\r\n                                       }}\r\n                                   >\r\n                                       <CloseIcon fontSize=\"inherit\" />\r\n                                   </IconButton>\r\n                               }\r\n                        >\r\n                            {status.content}\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    autoComplete=\"fname\"\r\n                                    name=\"firstName\"\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, firstName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoComplete=\"lname\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, lastName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, username: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, email: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, password: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"re-password\"\r\n                                    label=\"Re-Password\"\r\n                                    type=\"password\"\r\n                                    id=\"re-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, rePassword: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container justify=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link to='/login' variant=\"body2\">\r\n                                    Already have an account? Login\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}",["113","114"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Chart.js",["115"],"import React, { useState, useEffect } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\r\n\r\nimport Title from './Title';\r\nimport gameAPI from '../../Util/gameAPI';\r\n\r\n// Generate Sales Data\r\nfunction createData(time, amount) {\r\n    return { time, amount };\r\n}\r\n\r\nconst data = [\r\n    createData('00:00', 0),\r\n    createData('03:00', 300),\r\n    createData('06:00', 600),\r\n    createData('09:00', 800),\r\n    createData('12:00', 1500),\r\n    createData('15:00', 2000),\r\n    createData('18:00', 2400),\r\n    createData('21:00', 2400),\r\n    createData('24:00', 0),\r\n];\r\n\r\nexport default function Chart() {\r\n    const theme = useTheme();\r\n    const [rows, setRows] = useState([]);\r\n    console.log(rows)\r\n    // console.log(data)\r\n    useEffect(() => {\r\n        const fetchAll = async () => {\r\n            try {\r\n                const res = await gameAPI.getAll();\r\n                setRows(countFreq(res.data));\r\n            } catch (error) {\r\n                console.log('Failed to fetch: ', error);\r\n            }\r\n        }\r\n        fetchAll();\r\n    }, [])\r\n\r\n    function countFreq(arr) {\r\n        let a = [], b = [], prev;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (!arr[i].gamePlay.includes(prev)) {\r\n                a.push(arr[i].gamePlay.slice(0, 10));\r\n                b.push(1);\r\n            } else {\r\n                b[b.length - 1]++;\r\n            }\r\n            prev = arr[i].gamePlay.slice(0, 10);\r\n        }\r\n        console.log([a, b])\r\n        let result=[];\r\n        for(let i = 0; i < a.length; i++){\r\n            result.push(createData(a[i], b[i]))\r\n        }\r\n        console.log(result)\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title>Total room per day</Title>\r\n            <ResponsiveContainer>\r\n                <LineChart\r\n                    data={rows}\r\n                    margin={{\r\n                        top: 16,\r\n                        right: 16,\r\n                        bottom: 0,\r\n                        left: 24,\r\n                    }}\r\n                >\r\n                    <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\r\n                    <YAxis stroke={theme.palette.text.secondary}>\r\n                        <Label\r\n                            angle={270}\r\n                            position=\"left\"\r\n                            style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\r\n                        >\r\n                            Room\r\n                        </Label>\r\n                    </YAxis>\r\n                    <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\listItems.js",[],["116","117"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Deposits.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Orders.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Admin\\Service\\authService.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Title.js",[],"C:\\code\\DACK\\caro-admin\\src\\Util\\callAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\ListUser\\index.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\Control.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Dashboard\\index.js",["118","119"],"C:\\code\\DACK\\caro-admin\\src\\Components\\Report\\index.js",["120","121"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './report.css'\r\nimport War from '../IconSVG/War';\r\nimport gameAPI from '../../Util/gameAPI';\r\n\r\n// const rows = [\r\n//   { _id: 1, playerX: 'Snow', playerO: 'Jon', isPlayerXWin: true },\r\n//   { _id: 2, playerX: 'Lannister', playerO: 'Cersei', isPlayerXWin: false },\r\n//   { _id: 3, playerX: 'Lannister', playerO: 'Jaime', isPlayerXWin: true },\r\n//   { _id: 4, playerX: 'Stark', playerO: 'Arya', isPlayerXWin: false },\r\n//   { _id: 5, playerX: 'Targaryen', playerO: 'Daenerys', isPlayerXWin: true },\r\n//   { _id: 6, playerX: 'Melisandre', playerO: 'Tom', isPlayerXWin: true },\r\n//   { _id: 7, playerX: 'Clifford', playerO: 'Ferrara', isPlayerXWin: true },\r\n//   { _id: 8, playerX: 'Frances', playerO: 'Rossini', isPlayerXWin: false },\r\n//   { _id: 9, playerX: 'Roxie', playerO: 'Harvey', isPlayerXWin: false },\r\n// ];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'id', numeric: false, disablePadding: false, label: 'Id' },\r\n  { id: 'gamePlay', numeric: false, disablePadding: false, label: 'Date' },\r\n  { id: 'playerX.username', numeric: false, disablePadding: false, label: 'Player 1 Vs Player 2' },\r\n  { id: 'result', numeric: false, disablePadding: false, label: 'Result' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n        <StyledTableCell key='10' align={'right'} style={{ paddingRight: 30 }}>\r\n          View\r\n        </StyledTableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\n//------------------Custom header TableCell-------------------\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: '#CFD8DC',\r\n    fontWeight: 'bold',\r\n  },\r\n}))(TableCell);\r\n\r\n//------------------Custom odd even TableRow-------------------\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\n// const handleClick = (id) => {\r\n//     console.log(id)\r\n//     return (<Redirect to={`/game/${id}`}/>)\r\n// };\r\n\r\n//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>RETURN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\nexport default function Report(props) {\r\n  const classes = useStyles();\r\n\r\n  const [reset, setReset] = useState(false);\r\n  const [rows, setRows] = useState([]); \r\n  console.log(rows)\r\n\r\n  useEffect(() => {\r\n    const fetchAll = async () => {\r\n      try {\r\n        const res = await gameAPI.getAll();\r\n        setRows(res.data);\r\n      } catch (error) {\r\n        console.log('Failed to fetch: ', error);\r\n      }\r\n    } \r\n    fetchAll();\r\n  }, [reset])\r\n\r\n  //-----------------------------------\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('id');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <StyledTableRow\r\n                      hover\r\n                      tabIndex={-1}\r\n                      key={index}\r\n                    >\r\n                      <TableCell>{row._id}</TableCell>\r\n                      <TableCell>{row.gamePlay.slice(0, 10)}</TableCell>\r\n                      {/* <TableCell>{row._id}</TableCell> */}\r\n                      <TableCell>\r\n                        {row.playerX.username + ' '}\r\n                          <War style={{padding:5}} width='20px' height='20px'/>\r\n                        {' ' + row.playerO.username}\r\n                      </TableCell>\r\n                      <TableCell>{row.result === \"X\" ? \"player1\" : row.result === \"O\" ? \"player2\" : \"Draw\"}</TableCell>\r\n                      {/* <TableCell>{row.isPlayerXWin ? row.playerX.username : row.playerO.username}</TableCell> */}\r\n                      <TableCell align={'right'}>\r\n                        <Link to={`/game/${row._id}`} className='view'>\r\n                          <VisibilityIcon className='view-icon' style={{ color: 'gray' }} />\r\n                        </Link>\r\n                      </TableCell>\r\n                    </StyledTableRow>\r\n                  );\r\n                })\r\n              }\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 20]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper> \r\n      {/* {\r\n        rows.map((row,i)=>{\r\n          return <li key={i}>{row._id}</li>\r\n        })\r\n      } */}\r\n    </div >\r\n  );\r\n}","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\index.js",["122","123","124"],"import React, { useEffect, useState } from 'react';\r\nimport { Grid, GridList, Button, Switch, Box, Container } from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport './game.css';\r\nimport Board from './board'\r\nimport Player from \"./player\";\r\nimport calculateWinner from \"./gameCheck\";\r\nimport War from '../IconSVG/War';\r\nimport gameAPI from '../../Util/gameAPI'\r\nimport userAPI from '../../Util/userAPI'\r\n\r\nconst size = 20;\r\n\r\nexport default function Game(props) {\r\n  // console.log(props.match)\r\n  const [history, setHistory] = useState();\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [isDes, setIsDes] = useState(true);\r\n  const [data, setData] = useState();\r\n  const [user, setUser] = useState();\r\n  // console.log(data);\r\n  console.log(user);\r\n\r\n  useEffect(() => {\r\n    const fetchAll = async () => {\r\n      try {\r\n        const res = await gameAPI.getOne(props.match.params.id);\r\n        setData(res.data);\r\n        setHistory(res.data.history.history);\r\n        setStepNumber(res.data.history.step);\r\n      } catch (error) {\r\n        console.log('Failed to fetch: ', error);\r\n      }\r\n    }\r\n    fetchAll();\r\n  }, [])\r\n\r\n  console.log(user)\r\n  useEffect(() => {\r\n    const fetchAll = async () => {\r\n      try {\r\n        const res = await userAPI.getAll();\r\n        setUser(res.data.filter(item => item.id === data.playerX.userID || item.id === data.playerO.userID));\r\n      } catch (error) {\r\n        console.log('Failed to fetch: ', error);\r\n      }\r\n    }\r\n    fetchAll();\r\n  }, [data])\r\n\r\n  const handleClick = (i) => {\r\n    // const history2 = history.slice(0, stepNumber + 1);\r\n    // const current = history2[history2.length - 1]\r\n    // const squares = current.squares.slice()\r\n    // if (calculateWinner(squares, current.location, size) || squares[i]) {\r\n    //   return;\r\n    // }\r\n    // squares[i] = xIsNext ? 'X' : 'O';\r\n    // setHistory(history2.concat([{\r\n    //   squares: squares,\r\n    //   location: i\r\n    // }]))\r\n    // setStepNumber(history2.length)\r\n    // setXIsNext(!xIsNext)\r\n    // setIsDes(true)\r\n  }\r\n\r\n  const sortHistory = () => {\r\n    setIsDes(!isDes)\r\n  }\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step)\r\n    setXIsNext((step % 2 === 0))\r\n  }\r\n\r\n  const loca = (move) => {\r\n    let r = Math.floor((move) / size) + 1\r\n    let c = Math.floor((move) % size) + 1\r\n    return ': row ' + r + ' col ' + c\r\n  }\r\n\r\n  if (history) {\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares, current.location, size);\r\n    const moves = history.map((step, move) => {\r\n      // console.log(history[move].location)\r\n      const desc = move ?\r\n        'Go to move #' + move + loca(history[move].location) :\r\n        'Go to game start';\r\n      return (\r\n        <Button variant=\"contained\" key={move} onClick={() => jumpTo(move)} size=\"small\" style={{ width: '95%', fontSize: 11, margin: 5 }}>\r\n          {move === stepNumber ? <b>{desc}</b> : desc}\r\n        </Button>\r\n      );\r\n    });\r\n\r\n    const msg = data.chat.map((item, i) => {\r\n      return (\r\n        <Typography style={{width:\"100%\", height:\"auto\"}} variant=\"subtitle1\">\r\n          <div key={i} variant=\"body2\" gutterBottom >\r\n            <b>{item.username}: </b>{item.data}\r\n          </div>\r\n        </Typography>\r\n      )\r\n    })\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner.square;\r\n    } else if (!current.squares.includes(null)) {\r\n      status = \"Draw\";\r\n    } else {\r\n      status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {\r\n          data ?\r\n            <Grid container spacing={3} className=\"game\">\r\n              <Grid item xs={3}>\r\n                <Grid item xs={12}>\r\n                  <Player elo={user ? (data.playerX.userID === user[0].id ? user[0].elo : user[1].elo) : 1500} username={data.playerX.username} type={\"X\"} />\r\n                </Grid>\r\n                <div style={{ textAlign: 'center', padding: 20 }}>\r\n                  <War width='100px' height='100px' />\r\n                </div>\r\n                <Grid item xs={12}>\r\n                  <Player elo={user ? (data.playerO.userID === user[1].id ? user[1].elo : user[0].elo) : 1400} username={data.playerO.username} type={\"O\"} />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <div className=\"game-board\">\r\n                  <Board\r\n                    winningSquares={winner ? winner.line : []}\r\n                    squares={current.squares}\r\n                    onClick={i => handleClick(i)}\r\n                    size={size}\r\n                  />\r\n                </div>\r\n              </Grid>\r\n              <Grid xs={3}>\r\n                <Grid xs={12} className=\"game-info\">\r\n                  <Container>\r\n                    <h1 className=\"game-status\">{status}</h1>\r\n                    <h2>History move</h2>\r\n                    <Box component=\"div\" display=\"inline\" p={1}>\r\n                      <Switch onClick={() => sortHistory()} inputProps={{ 'aria-label': 'primary checkbox' }} />\r\n                    </Box>\r\n                    <Box component=\"div\" display=\"inline\" p={1}>\r\n                      Sort by: {isDes ? \"Asending\" : \"Descending\"}\r\n                    </Box>\r\n                    <GridList cellHeight={160}>\r\n                      <div style={{ width: '100%' }}>{isDes ? moves.reverse() : moves}</div>\r\n                    </GridList>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid xs={12} className=\"game-info\">\r\n                  <Container>\r\n                    <h2>Chat</h2>\r\n                    <GridList cellHeight={160}>\r\n                      <div style={{ width: '100%' }}>\r\n                        {msg}\r\n                      </div>\r\n                    </GridList>\r\n                  </Container>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            : null\r\n        }\r\n      </>\r\n\r\n    )\r\n  }\r\n  else return <></>\r\n\r\n}\r\n","C:\\code\\DACK\\caro-admin\\src\\Util\\userAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Profile\\index.js",["125","126","127"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Container, Grid } from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport userAPI from '../../Util/userAPI'\r\n\r\nexport default function Profile(props) {\r\n  const userNow = props.loginState.user;\r\n  const [error, setError] = useState();\r\n\r\n  const [input, setInput] = useState({\r\n    id: userNow._id,\r\n    firstName: userNow.firstName,\r\n    lastName: userNow.lastName,\r\n    username: userNow.username,\r\n    email: userNow.email,\r\n    pass: \"\",\r\n  });\r\n\r\n  const handleEditProfile = async (e) => {\r\n    e.preventDefault();\r\n    const res = await userAPI.editProfile(input);\r\n    if (res.data.error) {\r\n      setError(res.data.error)\r\n    }\r\n    else {\r\n      setError('')\r\n      props.setReset(!props.reset);\r\n    }\r\n  }\r\n\r\n  const handleChangePass = async (e) => {\r\n    e.preventDefault();\r\n    // const res = await userAPI.editProfile(input);\r\n    // if (res.error) {\r\n    //   console.log(res.error)\r\n    //   setError(res.error)\r\n    // }\r\n    // else {\r\n    //   console.log(res)\r\n    //   props.setReset(!props.reset);\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item md={3} xs={0}></Grid>\r\n      <Grid item md={6} xs={12}>\r\n        <h1>Edit profile</h1>\r\n        <form onSubmit={handleEditProfile}>\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Fisrt name\"\r\n            value={input.firstName}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, firstName: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Last name\"\r\n            value={input.lastName}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, lastName: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Username\"\r\n            value={input.username}\r\n            variant=\"outlined\"\r\n            disabled\r\n            onChange={(e) =>\r\n              setInput({ ...input, username: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            fullWidth\r\n            label=\"Email\"\r\n            value={input.email}\r\n            variant=\"outlined\"\r\n            disabled\r\n            onChange={(e) =>\r\n              setInput({ ...input, email: e.target.value })}\r\n          />\r\n          {error ? <h4 style={{ color: 'red', margin: '5px 0' }}>{error}</h4> : null}\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Current password\"\r\n            type=\"password\"\r\n            value={input.pass}\r\n            variant=\"outlined\"\r\n            onChange={(e) =>\r\n              setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" style={{ margin: '20px 0' }}>\r\n            Edit profile\r\n          </Button>\r\n        </form>\r\n      </Grid>\r\n      {/* <Grid item md={6} xs={12}>\r\n        <h1>Change password</h1>\r\n        <form onSubmit={handleChangePass}>\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Current password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Retype password\"\r\n            type=\"password\"\r\n            value=''\r\n            variant=\"outlined\"\r\n            // onChange={(e) =>\r\n            //   setInput({ ...input, pass: e.target.value })}\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" style={{ margin: '20px 0' }}>\r\n            Change password\r\n          </Button>\r\n        </form>\r\n      </Grid> */}\r\n    </Grid>\r\n  )\r\n}\r\n","C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\board.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\player.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\gameCheck.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\Game\\square.js",[],"C:\\code\\DACK\\caro-admin\\src\\Components\\IconSVG\\War.js",[],"C:\\code\\DACK\\caro-admin\\src\\Util\\gameAPI.js",[],"C:\\code\\DACK\\caro-admin\\src\\Context\\ListRoomContext.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":58,"column":29,"nodeType":"134","messageId":"135","endLine":58,"endColumn":47},{"ruleId":"128","replacedBy":"136"},{"ruleId":"130","replacedBy":"137"},{"ruleId":"132","severity":1,"message":"138","line":13,"column":7,"nodeType":"134","messageId":"135","endLine":13,"endColumn":11},{"ruleId":"128","replacedBy":"139"},{"ruleId":"130","replacedBy":"140"},{"ruleId":"132","severity":1,"message":"141","line":24,"column":8,"nodeType":"134","messageId":"135","endLine":24,"endColumn":16},{"ruleId":"132","severity":1,"message":"142","line":25,"column":8,"nodeType":"134","messageId":"135","endLine":25,"endColumn":14},{"ruleId":"132","severity":1,"message":"143","line":1,"column":38,"nodeType":"134","messageId":"135","endLine":1,"endColumn":48},{"ruleId":"132","severity":1,"message":"144","line":161,"column":17,"nodeType":"134","messageId":"135","endLine":161,"endColumn":25},{"ruleId":"132","severity":1,"message":"145","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":12},{"ruleId":"132","severity":1,"message":"146","line":4,"column":8,"nodeType":"134","messageId":"135","endLine":4,"endColumn":19},{"ruleId":"147","severity":1,"message":"148","line":40,"column":6,"nodeType":"149","endLine":40,"endColumn":8,"suggestions":"150"},{"ruleId":"132","severity":1,"message":"151","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"152","line":2,"column":18,"nodeType":"134","messageId":"135","endLine":2,"endColumn":27},{"ruleId":"132","severity":1,"message":"153","line":32,"column":9,"nodeType":"134","messageId":"135","endLine":32,"endColumn":25},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'setIsSignUpSuccess' is assigned a value but never used.","Identifier","unusedVar",["154"],["155"],"'data' is assigned a value but never used.",["154"],["155"],"'Deposits' is defined but never used.","'Orders' is defined but never used.","'useContext' is defined but never used.","'setReset' is assigned a value but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'useEffect' is defined but never used.","'Container' is defined but never used.","'handleChangePass' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},"Update the dependencies array to be: [props.match.params.id]",{"range":"159","text":"160"},[1325,1327],"[props.match.params.id]"]